plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'jacoco'
    id 'org.jetbrains.dokka-android'
    id 'kotlin-parcelize'
}

apply from: 'coverage/jacoco.gradle'

android {
    compileSdkVersion Versions.compileSdk
    buildToolsVersion Versions.buildTools

    defaultConfig {
        applicationId ApplicationId.id
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode Releases.versionCode
        versionName Releases.versionName

        testInstrumentationRunner "com.example.mvvmavengers.features.app.Runner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }
    }

    sourceSets.test.resources.srcDirs += ["src/test/resources"]

    buildTypes {
        debug {
            buildConfigField "String", "API_BASE_URL", "\"$debug_api_base_url\""
            buildConfigField "String", "API_URL", "\"$debug_api_url\""
            buildConfigField "String", "API_PORT", "\"$debug_api_port\""
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'API_BASE_URL', "\"$release_api_url\""
            buildConfigField "String", "API_URL", "\"$release_api_url\""
            buildConfigField 'String', 'API_PORT', "\"$release_api_port\""
        }
    }

    buildFeatures {
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    testOptions {
        animationsDisabled true

        packagingOptions {
            jniLibs {
                useLegacyPackaging true
            }
        }

        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']       //This line
            }
        }

        unitTests {
            includeAndroidResources = true
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += ["-Xallow-jvm-ir-dependencies", "-Xskip-prerelease-check"]
    }

    dokka {
        outputFormat = 'html'
    }

    sourceSets {
        androidTest {
            assets.srcDirs += ['src/androidTest/assets']
        }
    }

    packagingOptions {
        exclude "**/attach_hotspot_windows.dll"
        exclude "META-INF/licenses/**"
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/metadata.jvm.kotlin_module'
        exclude 'META-INF/metadata.kotlin_module'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation KotlinLibraries.kotlinStdLib
    implementation AndroidLibraries.appCompat
    implementation AndroidLibraries.coreKtx
    implementation AndroidLibraries.constraintLayout
    implementation AndroidLibraries.lcLivedata
    implementation AndroidLibraries.lcRuntime
    implementation AndroidLibraries.lcViewModel
    implementation AndroidLibraries.material
    testImplementation Testlibraries.junitTest
    androidTestImplementation 'androidx.test:core-ktx:1.2.0'

    // Test
    androidTestImplementation Testlibraries.junitExt
    androidTestImplementation Testlibraries.espressoCore
    androidTestImplementation Testlibraries.coroutines
    androidTestImplementation Testlibraries.archCore
    androidTestImplementation Testlibraries.mockk
    androidTestImplementation Testlibraries.mockWebServer
    androidTestImplementation Testlibraries.mocckAndroid
    androidTestImplementation Testlibraries.koinTest
    testImplementation Testlibraries.mockk
    testImplementation Testlibraries.mockWebServer
    testImplementation Testlibraries.archCore
    testImplementation Testlibraries.coroutines

    implementation (Libraries.timber){
        exclude group: "org.jetbrains", module: "annotations"
    }

    // Glide
    implementation Libraries.glide
    kapt Libraries.glideCompiler

    // Startup
    implementation Libraries.startupRuntime

    // Coroutines
    api Libraries.coroutines
    api Libraries.coroutinesAndroid

    // koin
    implementation Libraries.koinAndroid

    // Retrofit
    implementation Libraries.gson
    implementation Libraries.retrofitGsonConverter
    implementation Libraries.retrofit
    implementation Libraries.retrofitInterceptor

    // Room
    implementation AndroidLibraries.room
    kapt AndroidLibraries.roomKapt
    implementation AndroidLibraries.roomExtensions

    // LeakCanary
    debugImplementation Libraries.leakCanary

    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'

    androidTestImplementation('com.adevinta.android:barista:4.2.0') {
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }
}