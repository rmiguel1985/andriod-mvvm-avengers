jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*',
            'android/**/*.*', '**/*$[0-9].*', '**/ConnectivityHelper.*', '**/Constants.*',
            '**/PreferenceHelper.*', '**/ProgressBarHelper.*', '**/Extensions.*','**/entities/**',
            '**/utils/**','**/ListAvengerRepositoryOnlyCloudPolicyImpl.*', '**/*Module*.*',
            '**/ListAvengerRepositoryCacheWithCloudPolicyImpl.*', '**/BaseActivity.*','**/usecase/**',
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories.from(files([mainSrc]))
    classDirectories.from(files([debugTree]))
    executionData.from(fileTree(dir: project.buildDir, includes: [
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ]))
}